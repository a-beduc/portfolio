{ "header": {
    "name": "Alexandre Beduc.",
    "nav": {
      "aboutMe": "About me",
      "project": "Projects",
      "contact": "Contact"
    }
  },
  "index": {
    "banner": {
      "greeting": "Hello, I'm",
      "name": "Alexandre Beduc.",
      "information": "Junior Python Developer."
    },
    "form": {
      "title": "Get in touch",
      "description": "If you have any questions, a job opportunity, or a project in mind, feel free to contact me. I look forward to discussing how we could collaborate.",
      "labelFirstName": "First name*",
      "labelLastName": "Last name*",
      "labelEmail": "Email*",
      "labelCompany": "Company",
      "labelMessage": "Your message*",
      "button": "Submit"
    }
  },
  "project": {
    "chessLogApp": {
      "card": {
        "title": "Chess Log Tournament",
        "skill": {
          "01": "Python",
          "02": "MVC",
          "03": "Curses"
        },
        "content": "Automates tournament management: result entry, Swiss-system pairings and live standings."
      },
      "detail": {
        "description": {
          "title": "Tournament software",
          "content": {
            "01": "Scoring a chess tournament should be as simple as possible so you can use your brainpower for what really matters: planning the next move. No more lost score sheets, approximate pairings or addition mistakes. With our terminal-based software, the arbiter is freed from repetitive chores.",
            "02": "Chess Log Tournament",
            "03": " is a tournament manager written 100% in Python, built on the ",
            "04": "MVC design pattern,",
            "05": " with a polished interface thanks to the ",
            "06": "curses module."
          }
        },
        "imageText": {
          "01": "",
          "02": "Example of the software during a tournament",
          "03": ""
        },
        "whatILearned": {
          "title": "Functional choices",
          "content": {
            "01": "Although the technical specifications were complete, some points were open to interpretation; the implementation therefore follows these principles: ",
            "02": " > Every action (creating a player, entering a result, starting a round) is immediately saved to JSON files that serve as a database; this guarantees instant recovery after a power cut and enables easy manual edits.",
            "03": " > The pairing algorithm implements the \"circle method\" of round-robin: for n players it automatically generates n - 1 rounds where no one meets the same opponent twice. For each new round the software chooses from the remaining pairings the one that pits the top-scoring players against each other.",
            "04": " > The interface is entirely based on the curses module (from the C library of the same name). Windows and navigation are driven solely by the keyboard for a smooth and intuitive experience."
          }
        }
      }
    },
    "litrevu": {
      "card": {
        "title": "LITRevu Website",
        "skill": {
          "01": "Django",
          "02": "Jinja2",
          "03": "SQLite"
        },
        "content": "Platform for sharing and requesting book reviews. Personalized feed thanks to a follow/block system."
      },
      "detail": {
        "description": {
          "title": "Book-review platform",
          "content": {
            "01": "Want to know if that 900-page novel is really worth the effort? Eager to recommend your latest literary gem to fellow readers? LITRevu has you covered: open a ticket, request a review or publish your own—all in a clean interface.",
            "02": "LITRevu",
            "03": " developed with ",
            "04": "Django",
            "05": " and a ",
            "06": "SQLite",
            "07": " database offers a minimalist yet complete experience for sharing your reading adventures."
          }
        },
        "imageText": {
          "01": "",
          "02": "Site in action",
          "03": "Follow system"
        },
        "whatILearned": {
          "title": "First steps with Django",
          "content": {
            "01": "This project introduced me to the Django framework: MVT architecture, routing, relational models and their forms. I implemented a dynamic news feed and a user follow/block feature.",
            "02": "On the UI side—although it remains quite minimal, I built custom widgets, added light JavaScript interactions and organised styles in SCSS for cleaner, more maintainable code."
          }
        }
      }
    }
  }
}